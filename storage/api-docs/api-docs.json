{
    "openapi": "3.0.0",
    "info": {
        "title": "Tickets Please OpenApi Documentation",
        "description": "L5 Swagger OpenApi description",
        "contact": {
            "email": "admin@admin.com"
        },
        "license": {
            "name": "Laravel 12.0",
            "url": "https://laravel.com/docs/12.x/license"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://tickets-please.test",
            "description": "Tickets Please API Server"
        }
    ],
    "paths": {
        "/api/example": {
            "get": {
                "tags": [
                    "Example"
                ],
                "summary": "Returns a greeting message",
                "operationId": "aca3ceea19ded7377ea61161503247fa",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get list of Users",
                "description": "Returns list of Users",
                "operationId": "getUsersList",
                "parameters": [
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Data field(s) to sort by. Separate multiple fields with commas. Denote descending sort with a minus sign. Example: sort=name,-isManager",
                        "required": false
                    },
                    {
                        "name": "filter[name]",
                        "in": "query",
                        "description": "Filter by title. Wildcards are supported. Example: \\*fix\\*\n    ",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Enter token in format: Bearer {token}",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Example",
            "description": "Example"
        },
        {
            "name": "Users",
            "description": "Users"
        }
    ]
}